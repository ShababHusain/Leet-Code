class Solution {
    public long minimumDifference(int[] nums) {
        int n = nums.length / 3;
        int len = nums.length;

        long[] leftSum = new long[len];
        long[] rightSum = new long[len];

        // Max-heap for smallest n elements from the left
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        long left = 0;
        for (int i = 0; i < 2 * n; i++) {
            maxHeap.offer(nums[i]);
            left += nums[i];
            if (maxHeap.size() > n) {
                left -= maxHeap.poll();
            }
            if (maxHeap.size() == n) {
                leftSum[i] = left;
            }
        }

        // Min-heap for largest n elements from the right
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        long right = 0;
        for (int i = len - 1; i >= n; i--) {
            minHeap.offer(nums[i]);
            right += nums[i];
            if (minHeap.size() > n) {
                right -= minHeap.poll();
            }
            if (minHeap.size() == n) {
                rightSum[i] = right;
            }
        }

        long minDiff = Long.MAX_VALUE;
        for (int i = n - 1; i < 2 * n; i++) {
            minDiff = Math.min(minDiff, leftSum[i] - rightSum[i + 1]);
        }

        return minDiff;
    }
}
