import java.util.*;

class Solution {
    public List<String> getWordsInLongestSubsequence(String[] words, int[] groups) {
        int n = words.length;
        int[] dp = new int[n];        // dp[i] = length of longest subsequence ending at i
        int[] parent = new int[n];    // for reconstruction

        Arrays.fill(dp, 1);
        Arrays.fill(parent, -1);

        int maxLen = 1, lastIndex = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                // condition: groups[i] != groups[j] AND words[i], words[j] differ by exactly 1 character
                if (groups[i] != groups[j] && isNeighbor(words[i], words[j])) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        parent[i] = j;
                    }
                }
            }
            if (dp[i] > maxLen) {
                maxLen = dp[i];
                lastIndex = i;
            }
        }

        // reconstruct subsequence
        LinkedList<String> result = new LinkedList<>();
        int cur = lastIndex;
        while (cur != -1) {
            result.addFirst(words[cur]);
            cur = parent[cur];
        }
        return result;
    }

    // helper: check if two words differ by exactly 1 character
    private boolean isNeighbor(String a, String b) {
        if (a.length() != b.length()) return false;
        int diff = 0;
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) != b.charAt(i)) {
                diff++;
                if (diff > 1) return false;
            }
        }
        return diff == 1;
    }
}
