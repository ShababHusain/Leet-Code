class Solution {
    public String longestSubsequenceRepeatedK(String s, int k) {
        int[] freq = new int[26];
        for (char c : s.toCharArray()) freq[c - 'a']++;

        List<Character> candidates = new ArrayList<>();
        for (char c = 'a'; c <= 'z'; c++) {
            if (freq[c - 'a'] >= k) candidates.add(c);
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer("");
        String result = "";

        while (!queue.isEmpty()) {
            String curr = queue.poll();
            for (char c : candidates) {
                String next = curr + c;
                if (isValid(next, s, k)) {
                    if (next.length() > result.length() || 
                       (next.length() == result.length() && next.compareTo(result) > 0)) {
                        result = next;
                    }
                    queue.offer(next);
                }
            }
        }

        return result;
    }

    private boolean isValid(String seq, String s, int k) {
        int i = 0, count = 0;
        for (char c : s.toCharArray()) {
            if (c == seq.charAt(i)) {
                i++;
                if (i == seq.length()) {
                    count++;
                    i = 0;
                    if (count == k) return true;
                }
            }
        }
        return false;
    }
}
