class Solution {
    public long minCost(int[] basket1, int[] basket2) {
        Map<Integer, Integer> freq = new HashMap<>();
        for (int x : basket1) freq.put(x, freq.getOrDefault(x, 0) + 1);
        for (int x : basket2) freq.put(x, freq.getOrDefault(x, 0) - 1);

        List<Integer> excess = new ArrayList<>();
        int minVal = Integer.MAX_VALUE;

        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            int val = entry.getKey(), count = entry.getValue();
            if (Math.abs(count) % 2 != 0) return -1;
            minVal = Math.min(minVal, val);
            for (int i = 0; i < Math.abs(count) / 2; i++) {
                excess.add(val);
            }
        }

        Collections.sort(excess);
        long cost = 0;
        for (int i = 0; i < excess.size() / 2; i++) {
            cost += Math.min(excess.get(i), 2 * minVal);
        }

        return cost;
    }
}
