import java.util.ArrayDeque;

class Solution {
    public String clearStars(String s) {
        int n = s.length();
        // queues per character storing indices (in encounter order)
        ArrayDeque<Integer>[] pos = new ArrayDeque[26];
        for (int i = 0; i < 26; i++) pos[i] = new ArrayDeque<>();

        boolean[] removed = new boolean[n];

        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == '*') {
                // find smallest available character (a -> z)
                for (int ch = 0; ch < 26; ch++) {
                    if (!pos[ch].isEmpty()) {
                        // remove the rightmost occurrence (closest to this '*')
                        int idx = pos[ch].removeLast();
                        removed[idx] = true;
                        break;
                    }
                }
            } else {
                pos[c - 'a'].addLast(i);
            }
        }

        // build result from characters that are not stars and not removed
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c != '*' && !removed[i]) sb.append(c);
        }
        return sb.toString();
    }
}
