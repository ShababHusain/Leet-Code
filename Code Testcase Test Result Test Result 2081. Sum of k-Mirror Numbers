class Solution {
    public long kMirror(int k, int n) {
        long sum = 0;
        int count = 0;
        int length = 1;

        while (count < n) {
            for (long pal : generatePalindromes(length)) {
                if (isPalindrome(Long.toString(pal, k))) {
                    sum += pal;
                    count++;
                    if (count == n) return sum;
                }
            }
            length++;
        }

        return sum;
    }

    private List<Long> generatePalindromes(int length) {
        List<Long> result = new ArrayList<>();
        int start = (int) Math.pow(10, (length - 1) / 2);
        int end = (int) Math.pow(10, (length + 1) / 2);

        for (int i = start; i < end; i++) {
            String firstHalf = Integer.toString(i);
            String secondHalf = new StringBuilder(firstHalf.substring(0, length % 2 == 0 ? firstHalf.length() : firstHalf.length() - 1)).reverse().toString();
            result.add(Long.parseLong(firstHalf + secondHalf));
        }

        return result;
    }

    private boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;
    }
}
