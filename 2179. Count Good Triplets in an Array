class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int[] pos=new int[n];
        for(int i=0;i<n;i++){
            pos[nums2[i]]=i;
        }
        int[] mapped = new int[n];
        for(int i=0; i<n; i++){
            mapped[i]=pos[nums1[i]];
        }
        BIT leftBIT = new BIT(n);
        BIT rightBIT = new BIT(n);

        int[] left = new int[n];
        int[] right = new int[n];

        for(int i=0; i<n; i++){
            left[i]= leftBIT.query(mapped[i]);
            leftBIT.update(mapped[i],1);
        }

        for(int i=n-1; i>=0; i--){
            right[i]=rightBIT.query(n-1)-rightBIT.query(mapped[i]);
            rightBIT.update(mapped[i],1);
        }

        long result=0;
        for(int i=0;i<n;i++){
            result +=(long) left[i]*right[i];
        }
        return result;
        
    }
    class BIT{
        int[] tree;
        int size;

        BIT(int n){
            size=n+2;
            tree=new int[size];
        }
        void update(int i, int val){
            i++;
            while(i<size){
                tree[i]+=val;
                i+=i&-i;
            }
        }
        int query(int i){
            i++;
            int sum=0;
            while(i>0){
                sum +=tree[i];
                i-=i&-i;
            }
            return sum;
        }
    }
}
